{"version":3,"sources":["App.js","index.js"],"names":["DIGITS","listContains","l","x","y","some","m","game","width","height","mineCount","this","revealedCount","minesRemaining","status","id","gameOver","board","row","push","generateMines","createButtons","buttons","buttonID","key","className","onClick","updateButtons","bind","onContextMenu","handleContextMenu","reveal","j","i","document","getElementById","textContent","flag","mines","length","Math","floor","random","lst","b","a","count","neighbours","n","alert","countMines","win","App","rootElement","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f20d57fe.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./styles.css\";\n\nlet UNREVEALED = \"🌿\";\nlet FLAG = \"🚩\";\nlet MINE = \"💥\";\nlet DEAD = \"😵\";\nlet DIGITS = [\"🌻\", \"1️⃣\", \"2️⃣\", \"3️⃣\", \"4️⃣\", \"5️⃣\", \"6️⃣\", \"7️⃣\", \"8️⃣\"];\n\nfunction listContains(l, x, y) {\n  return l.some((m) => m[0] === x && m[1] === y);\n}\n\nclass Minesweeper {\n  constructor(width, height, mineCount) {\n    this.width = width;\n    this.height = height;\n    this.mineCount = mineCount;\n    this.revealedCount = 0;\n    this.minesRemaining = mineCount;\n    this.status = (\n      <div id=\"status\">\n        {FLAG} {this.minesRemaining}\n      </div>\n    );\n    this.gameOver = false;\n    this.board = [];\n    for (let y = 0; y < height; y++) {\n      let row = [];\n      for (let x = 0; x < width; x++) {\n        row.push(UNREVEALED);\n      }\n      this.board.push(row);\n    }\n    this.generateMines();\n    this.createButtons();\n  }\n\n  createButtons() {\n    this.buttons = [];\n    for (let y = 0; y < this.height; y++) {\n      let row = [];\n      for (let x = 0; x < this.width; x++) {\n        let buttonID = y + this.width * x;\n        row.push(\n          <div key={buttonID}>\n            <button\n              className=\"Button\"\n              id={buttonID}\n              onClick={this.updateButtons.bind(this, x, y)}\n              onContextMenu={this.handleContextMenu.bind(this, x, y)}\n            >\n              {this.board[y][x]}\n            </button>\n          </div>\n        );\n      }\n      this.buttons.push(\n        <div className=\"Row\" key={row[y].key}>\n          {row}\n        </div>\n      );\n    }\n  }\n\n  updateButtons(x, y) {\n    // reveal square (x, y) and update all button texts\n    this.reveal(x, y);\n    for (let j = 0; j < this.height; j++) {\n      for (let i = 0; i < this.width; i++) {\n        let id = j + this.width * i;\n        document.getElementById(id).textContent = this.board[j][i];\n      }\n    }\n  }\n\n  handleContextMenu(x, y) {\n    // flag/unflag square (x, y)\n    this.flag(x, y);\n    let id = y + this.width * x;\n    document.getElementById(id).textContent = this.board[y][x];\n    document.getElementById(\"status\").textContent = FLAG + this.minesRemaining;\n  }\n\n  generateMines() {\n    // randomly generates mines\n    this.mines = [];\n    while (this.mines.length !== this.mineCount) {\n      let x = Math.floor(Math.random() * this.width);\n      let y = Math.floor(Math.random() * this.height);\n      if (!listContains(this.mines, x, y)) {\n        this.mines.push([x, y]);\n      }\n    }\n  }\n\n  flag(x, y) {\n    // flags/unflags square (x, y)\n    if (\n      !this.gameOver &&\n      0 <= x &&\n      x < this.width &&\n      0 <= y &&\n      y < this.height\n    ) {\n      if (this.board[y][x] === UNREVEALED && this.minesRemaining > 0) {\n        this.board[y][x] = FLAG;\n        this.minesRemaining--;\n      } else if (this.board[y][x] === FLAG) {\n        this.board[y][x] = UNREVEALED;\n        this.minesRemaining++;\n      }\n    }\n  }\n\n  neighbours(x, y) {\n    // returns a list of neighbours of square (x, y)\n    let lst = [];\n    for (let b = -1; b <= 1; b++) {\n      for (let a = -1; a <= 1; a++) {\n        if (\n          0 <= x + a &&\n          x + a < this.width &&\n          0 <= y + b &&\n          y + b < this.height &&\n          !listContains(lst, x + a, y + b)\n        ) {\n          lst.push([x + a, y + b]);\n        }\n      }\n    }\n    return lst;\n  }\n\n  countMines(x, y) {\n    // returns the number of mines adjacent to square (x, y)\n    let count = 0;\n    for (let n of this.neighbours(x, y)) {\n      if (listContains(this.mines, n[0], n[1])) {\n        count++;\n      }\n    }\n    return count;\n  }\n\n  reveal(x, y) {\n    // reveals square (x, y)\n    if (\n      !this.gameOver &&\n      0 <= x &&\n      x < this.width &&\n      0 <= y &&\n      y < this.height &&\n      this.board[y][x] === UNREVEALED\n    ) {\n      if (listContains(this.mines, x, y)) {\n        this.gameOver = true;\n        for (let m of this.mines) {\n          if (this.board[m[1]][m[0]] !== FLAG) {\n            this.board[m[1]][m[0]] = MINE;\n          }\n        }\n        this.board[y][x] = DEAD;\n        alert(\"Game Over\");\n      } else {\n        this.board[y][x] = DIGITS[this.countMines(x, y)];\n        this.revealedCount++;\n        if (this.board[y][x] === DIGITS[0]) {\n          for (let m of this.neighbours(x, y)) {\n            this.reveal(m[0], m[1]);\n          }\n        }\n        if (this.win()) {\n          for (let m of this.mines) {\n            this.board[m[1]][m[0]] = FLAG;\n          }\n          alert(\"You win!\");\n        }\n      }\n    }\n  }\n\n  win() {\n    // returns true if game is won\n    return this.revealedCount === this.width * this.height - this.mineCount;\n  }\n}\n\nlet game = new Minesweeper(20, 10, 30);\n\nexport default function App() {\n  return (\n    <div className=\"App\">\n      <h1>Minesweeper</h1>\n      <div>{game.buttons}</div>\n      <h4>{game.status}</h4>\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nimport App from \"./App\";\n\nconst rootElement = document.getElementById(\"root\");\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  rootElement\n);\n"],"sourceRoot":""}